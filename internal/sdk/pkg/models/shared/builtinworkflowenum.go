// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type BuiltinWorkflowEnumType string

const (
	BuiltinWorkflowEnumTypeAllOf BuiltinWorkflowEnumType = "AllOf"
	BuiltinWorkflowEnumTypeOneOf BuiltinWorkflowEnumType = "OneOf"
)

type BuiltinWorkflowEnum struct {
	BuiltinWorkflowAllOfVariant *BuiltinWorkflowAllOfVariant
	BuiltinWorkflowOneOfVariant *BuiltinWorkflowOneOfVariant

	Type BuiltinWorkflowEnumType
}

func CreateBuiltinWorkflowEnumAllOf(allOf BuiltinWorkflowAllOfVariant) BuiltinWorkflowEnum {
	typ := BuiltinWorkflowEnumTypeAllOf
	typStr := BuiltinWorkflowAllOfVariantType(typ)
	allOf.Type = typStr

	return BuiltinWorkflowEnum{
		BuiltinWorkflowAllOfVariant: &allOf,
		Type:                        typ,
	}
}

func CreateBuiltinWorkflowEnumOneOf(oneOf BuiltinWorkflowOneOfVariant) BuiltinWorkflowEnum {
	typ := BuiltinWorkflowEnumTypeOneOf
	typStr := BuiltinWorkflowOneOfVariantType(typ)
	oneOf.Type = typStr

	return BuiltinWorkflowEnum{
		BuiltinWorkflowOneOfVariant: &oneOf,
		Type:                        typ,
	}
}

func (u *BuiltinWorkflowEnum) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "AllOf":
		d = json.NewDecoder(bytes.NewReader(data))
		builtinWorkflowAllOfVariant := new(BuiltinWorkflowAllOfVariant)
		if err := d.Decode(&builtinWorkflowAllOfVariant); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.BuiltinWorkflowAllOfVariant = builtinWorkflowAllOfVariant
		u.Type = BuiltinWorkflowEnumTypeAllOf
		return nil
	case "OneOf":
		d = json.NewDecoder(bytes.NewReader(data))
		builtinWorkflowOneOfVariant := new(BuiltinWorkflowOneOfVariant)
		if err := d.Decode(&builtinWorkflowOneOfVariant); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.BuiltinWorkflowOneOfVariant = builtinWorkflowOneOfVariant
		u.Type = BuiltinWorkflowEnumTypeOneOf
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BuiltinWorkflowEnum) MarshalJSON() ([]byte, error) {
	if u.BuiltinWorkflowAllOfVariant != nil {
		return json.Marshal(u.BuiltinWorkflowAllOfVariant)
	}

	if u.BuiltinWorkflowOneOfVariant != nil {
		return json.Marshal(u.BuiltinWorkflowOneOfVariant)
	}

	return nil, nil
}
