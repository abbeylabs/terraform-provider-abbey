// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type TaskStatus string

const (
	TaskStatusPending  TaskStatus = "Pending"
	TaskStatusDenied   TaskStatus = "Denied"
	TaskStatusApproved TaskStatus = "Approved"
)

func (e TaskStatus) ToPointer() *TaskStatus {
	return &e
}

func (e *TaskStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pending":
		fallthrough
	case "Denied":
		fallthrough
	case "Approved":
		*e = TaskStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskStatus: %v", v)
	}
}

// Task - Created
type Task struct {
	CreatedAt       time.Time  `json:"created_at"`
	DecisionReason  *string    `json:"decision_reason,omitempty"`
	ID              string     `json:"id"`
	RequestID       string     `json:"request_id"`
	RequestableName string     `json:"requestable_name"`
	RequesterName   string     `json:"requester_name"`
	Status          TaskStatus `json:"status"`
}
