// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ConnectionAuthOauth2Flow struct {
	CallbackQueryParams    []string                `json:"callback_query_params,omitempty"`
	ConnectionAuthTypeEnum *ConnectionAuthTypeEnum `json:"type,omitempty"`
	// Describes how the client should conduct the authorization code exchange.
	//
	Exchange    *Oauth2FlowExchange `json:"exchange,omitempty"`
	Pkce        *Oauth2FlowPkce     `json:"pkce,omitempty"`
	QueryParams []KeyValuePair      `json:"query_params,omitempty"`
	URL         string              `json:"url"`
}

type ConnectionAuthType string

const (
	ConnectionAuthTypeOauth2 ConnectionAuthType = "Oauth2"
)

type ConnectionAuth struct {
	ConnectionAuthOauth2Flow *ConnectionAuthOauth2Flow

	Type ConnectionAuthType
}

func CreateConnectionAuthOauth2(oauth2 ConnectionAuthOauth2Flow) ConnectionAuth {
	typ := ConnectionAuthTypeOauth2
	typStr := ConnectionAuthTypeEnum(typ)
	oauth2.ConnectionAuthTypeEnum = &typStr

	return ConnectionAuth{
		ConnectionAuthOauth2Flow: &oauth2,
		Type:                     typ,
	}
}

func (u *ConnectionAuth) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		ConnectionAuthTypeEnum string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ConnectionAuthTypeEnum {
	case "Oauth2":
		d = json.NewDecoder(bytes.NewReader(data))
		connectionAuthOauth2Flow := new(ConnectionAuthOauth2Flow)
		if err := d.Decode(&connectionAuthOauth2Flow); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionAuthOauth2Flow = connectionAuthOauth2Flow
		u.Type = ConnectionAuthTypeOauth2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectionAuth) MarshalJSON() ([]byte, error) {
	if u.ConnectionAuthOauth2Flow != nil {
		return json.Marshal(u.ConnectionAuthOauth2Flow)
	}

	return nil, nil
}
