// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ConnectionParamsPagerdutyConnectionValue struct {
	Name  *string             `json:"name,omitempty"`
	Type  ConnectionType      `json:"type"`
	Value PagerdutyConnection `json:"value"`
}

type ConnectionParamsConnectionParamsGithubVariant struct {
	Name  *string                `json:"name,omitempty"`
	Type  ConnectionType         `json:"type"`
	Value ConnectionParamsGithub `json:"value"`
}

type ConnectionParamsType string

const (
	ConnectionParamsTypeGithub    ConnectionParamsType = "Github"
	ConnectionParamsTypePagerduty ConnectionParamsType = "Pagerduty"
)

type ConnectionParams struct {
	ConnectionParamsConnectionParamsGithubVariant *ConnectionParamsConnectionParamsGithubVariant
	ConnectionParamsPagerdutyConnectionValue      *ConnectionParamsPagerdutyConnectionValue

	Type ConnectionParamsType
}

func CreateConnectionParamsGithub(github ConnectionParamsConnectionParamsGithubVariant) ConnectionParams {
	typ := ConnectionParamsTypeGithub
	typStr := ConnectionType(typ)
	github.Type = typStr

	return ConnectionParams{
		ConnectionParamsConnectionParamsGithubVariant: &github,
		Type: typ,
	}
}

func CreateConnectionParamsPagerduty(pagerduty ConnectionParamsPagerdutyConnectionValue) ConnectionParams {
	typ := ConnectionParamsTypePagerduty
	typStr := ConnectionType(typ)
	pagerduty.Type = typStr

	return ConnectionParams{
		ConnectionParamsPagerdutyConnectionValue: &pagerduty,
		Type:                                     typ,
	}
}

func (u *ConnectionParams) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "Github":
		d = json.NewDecoder(bytes.NewReader(data))
		connectionParamsConnectionParamsGithubVariant := new(ConnectionParamsConnectionParamsGithubVariant)
		if err := d.Decode(&connectionParamsConnectionParamsGithubVariant); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionParamsConnectionParamsGithubVariant = connectionParamsConnectionParamsGithubVariant
		u.Type = ConnectionParamsTypeGithub
		return nil
	case "Pagerduty":
		d = json.NewDecoder(bytes.NewReader(data))
		connectionParamsPagerdutyConnectionValue := new(ConnectionParamsPagerdutyConnectionValue)
		if err := d.Decode(&connectionParamsPagerdutyConnectionValue); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ConnectionParamsPagerdutyConnectionValue = connectionParamsPagerdutyConnectionValue
		u.Type = ConnectionParamsTypePagerduty
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ConnectionParams) MarshalJSON() ([]byte, error) {
	if u.ConnectionParamsConnectionParamsGithubVariant != nil {
		return json.Marshal(u.ConnectionParamsConnectionParamsGithubVariant)
	}

	if u.ConnectionParamsPagerdutyConnectionValue != nil {
		return json.Marshal(u.ConnectionParamsPagerdutyConnectionValue)
	}

	return nil, nil
}
