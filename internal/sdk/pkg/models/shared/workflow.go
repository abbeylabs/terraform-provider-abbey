// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type WorkflowType string

const (
	WorkflowTypeBuiltin  WorkflowType = "Builtin"
	WorkflowTypeGrantKit WorkflowType = "GrantKit"
)

type Workflow struct {
	BuiltinWorkflow             *BuiltinWorkflow
	ReviewWorkflowLegacyWrapper *ReviewWorkflowLegacyWrapper

	Type WorkflowType
}

func CreateWorkflowBuiltin(builtin BuiltinWorkflow) Workflow {
	typ := WorkflowTypeBuiltin
	typStr := BuiltinWorkflowType(typ)
	builtin.Type = typStr

	return Workflow{
		BuiltinWorkflow: &builtin,
		Type:            typ,
	}
}

func CreateWorkflowGrantKit(grantKit ReviewWorkflowLegacyWrapper) Workflow {
	typ := WorkflowTypeGrantKit
	typStr := ReviewWorkflowLegacyWrapperType(typ)
	grantKit.Type = typStr

	return Workflow{
		ReviewWorkflowLegacyWrapper: &grantKit,
		Type:                        typ,
	}
}

func (u *Workflow) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "Builtin":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		builtinWorkflow := new(BuiltinWorkflow)
		if err := d.Decode(&builtinWorkflow); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.BuiltinWorkflow = builtinWorkflow
		u.Type = WorkflowTypeBuiltin
		return nil
	case "GrantKit":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		reviewWorkflowLegacyWrapper := new(ReviewWorkflowLegacyWrapper)
		if err := d.Decode(&reviewWorkflowLegacyWrapper); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ReviewWorkflowLegacyWrapper = reviewWorkflowLegacyWrapper
		u.Type = WorkflowTypeGrantKit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Workflow) MarshalJSON() ([]byte, error) {
	if u.BuiltinWorkflow != nil {
		return json.Marshal(u.BuiltinWorkflow)
	}

	if u.ReviewWorkflowLegacyWrapper != nil {
		return json.Marshal(u.ReviewWorkflowLegacyWrapper)
	}

	return nil, nil
}
