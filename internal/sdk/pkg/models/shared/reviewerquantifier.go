// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type ReviewerQuantifierType string

const (
	ReviewerQuantifierTypeAllOf ReviewerQuantifierType = "AllOf"
	ReviewerQuantifierTypeOneOf ReviewerQuantifierType = "OneOf"
)

type ReviewerQuantifier struct {
	AllOfReviewerQuantifier *AllOfReviewerQuantifier
	OneOfReviewerQuantifier *OneOfReviewerQuantifier

	Type ReviewerQuantifierType
}

func CreateReviewerQuantifierAllOf(allOf AllOfReviewerQuantifier) ReviewerQuantifier {
	typ := ReviewerQuantifierTypeAllOf
	typStr := AllOfReviewerQuantifierType(typ)
	allOf.Type = typStr

	return ReviewerQuantifier{
		AllOfReviewerQuantifier: &allOf,
		Type:                    typ,
	}
}

func CreateReviewerQuantifierOneOf(oneOf OneOfReviewerQuantifier) ReviewerQuantifier {
	typ := ReviewerQuantifierTypeOneOf
	typStr := OneOfReviewerQuantifierType(typ)
	oneOf.Type = typStr

	return ReviewerQuantifier{
		OneOfReviewerQuantifier: &oneOf,
		Type:                    typ,
	}
}

func (u *ReviewerQuantifier) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "AllOf":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		allOfReviewerQuantifier := new(AllOfReviewerQuantifier)
		if err := d.Decode(&allOfReviewerQuantifier); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AllOfReviewerQuantifier = allOfReviewerQuantifier
		u.Type = ReviewerQuantifierTypeAllOf
		return nil
	case "OneOf":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		oneOfReviewerQuantifier := new(OneOfReviewerQuantifier)
		if err := d.Decode(&oneOfReviewerQuantifier); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.OneOfReviewerQuantifier = oneOfReviewerQuantifier
		u.Type = ReviewerQuantifierTypeOneOf
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReviewerQuantifier) MarshalJSON() ([]byte, error) {
	if u.AllOfReviewerQuantifier != nil {
		return json.Marshal(u.AllOfReviewerQuantifier)
	}

	if u.OneOfReviewerQuantifier != nil {
		return json.Marshal(u.OneOfReviewerQuantifier)
	}

	return nil, nil
}
