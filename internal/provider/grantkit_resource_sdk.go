// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"abbey/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *GrantKitResourceModel) ToCreateSDKType() *shared.GrantKitCreateParams {
	description := r.Description.ValueString()
	name := r.Name.ValueString()
	append1 := new(string)
	if !r.Output.Append.IsUnknown() && !r.Output.Append.IsNull() {
		*append1 = r.Output.Append.ValueString()
	} else {
		append1 = nil
	}
	location := r.Output.Location.ValueString()
	overwrite := new(string)
	if !r.Output.Overwrite.IsUnknown() && !r.Output.Overwrite.IsNull() {
		*overwrite = r.Output.Overwrite.ValueString()
	} else {
		overwrite = nil
	}
	output := shared.Output{
		Append:    append1,
		Location:  location,
		Overwrite: overwrite,
	}
	policies := make([]shared.Policy, 0)
	for _, policiesItem := range r.Policies {
		bundle := new(string)
		if !policiesItem.Bundle.IsUnknown() && !policiesItem.Bundle.IsNull() {
			*bundle = policiesItem.Bundle.ValueString()
		} else {
			bundle = nil
		}
		query := new(string)
		if !policiesItem.Query.IsUnknown() && !policiesItem.Query.IsNull() {
			*query = policiesItem.Query.ValueString()
		} else {
			query = nil
		}
		policies = append(policies, shared.Policy{
			Bundle: bundle,
			Query:  query,
		})
	}
	var workflow *shared.GrantWorkflow
	if r.Workflow != nil {
		steps := make([]shared.Step, 0)
		for _, stepsItem := range r.Workflow.Steps {
			allOf := make([]string, 0)
			for _, allOfItem := range stepsItem.Reviewers.AllOf {
				allOf = append(allOf, allOfItem.ValueString())
			}
			oneOf := make([]string, 0)
			for _, oneOfItem := range stepsItem.Reviewers.OneOf {
				oneOf = append(oneOf, oneOfItem.ValueString())
			}
			reviewers := shared.Reviewers{
				AllOf: allOf,
				OneOf: oneOf,
			}
			skipIf := make([]shared.Policy, 0)
			for _, skipIfItem := range stepsItem.SkipIf {
				bundle1 := new(string)
				if !skipIfItem.Bundle.IsUnknown() && !skipIfItem.Bundle.IsNull() {
					*bundle1 = skipIfItem.Bundle.ValueString()
				} else {
					bundle1 = nil
				}
				query1 := new(string)
				if !skipIfItem.Query.IsUnknown() && !skipIfItem.Query.IsNull() {
					*query1 = skipIfItem.Query.ValueString()
				} else {
					query1 = nil
				}
				skipIf = append(skipIf, shared.Policy{
					Bundle: bundle1,
					Query:  query1,
				})
			}
			steps = append(steps, shared.Step{
				Reviewers: reviewers,
				SkipIf:    skipIf,
			})
		}
		workflow = &shared.GrantWorkflow{
			Steps: steps,
		}
	}
	out := shared.GrantKitCreateParams{
		Description: description,
		Name:        name,
		Output:      output,
		Policies:    policies,
		Workflow:    workflow,
	}
	return &out
}

func (r *GrantKitResourceModel) ToGetSDKType() *shared.GrantKitCreateParams {
	out := r.ToCreateSDKType()
	return out
}

func (r *GrantKitResourceModel) ToUpdateSDKType() *shared.GrantKitUpdateParams {
	description := r.Description.ValueString()
	name := r.Name.ValueString()
	append1 := new(string)
	if !r.Output.Append.IsUnknown() && !r.Output.Append.IsNull() {
		*append1 = r.Output.Append.ValueString()
	} else {
		append1 = nil
	}
	location := r.Output.Location.ValueString()
	overwrite := new(string)
	if !r.Output.Overwrite.IsUnknown() && !r.Output.Overwrite.IsNull() {
		*overwrite = r.Output.Overwrite.ValueString()
	} else {
		overwrite = nil
	}
	output := shared.Output{
		Append:    append1,
		Location:  location,
		Overwrite: overwrite,
	}
	policies := make([]shared.Policy, 0)
	for _, policiesItem := range r.Policies {
		bundle := new(string)
		if !policiesItem.Bundle.IsUnknown() && !policiesItem.Bundle.IsNull() {
			*bundle = policiesItem.Bundle.ValueString()
		} else {
			bundle = nil
		}
		query := new(string)
		if !policiesItem.Query.IsUnknown() && !policiesItem.Query.IsNull() {
			*query = policiesItem.Query.ValueString()
		} else {
			query = nil
		}
		policies = append(policies, shared.Policy{
			Bundle: bundle,
			Query:  query,
		})
	}
	var workflow *shared.GrantWorkflow
	if r.Workflow != nil {
		steps := make([]shared.Step, 0)
		for _, stepsItem := range r.Workflow.Steps {
			allOf := make([]string, 0)
			for _, allOfItem := range stepsItem.Reviewers.AllOf {
				allOf = append(allOf, allOfItem.ValueString())
			}
			oneOf := make([]string, 0)
			for _, oneOfItem := range stepsItem.Reviewers.OneOf {
				oneOf = append(oneOf, oneOfItem.ValueString())
			}
			reviewers := shared.Reviewers{
				AllOf: allOf,
				OneOf: oneOf,
			}
			skipIf := make([]shared.Policy, 0)
			for _, skipIfItem := range stepsItem.SkipIf {
				bundle1 := new(string)
				if !skipIfItem.Bundle.IsUnknown() && !skipIfItem.Bundle.IsNull() {
					*bundle1 = skipIfItem.Bundle.ValueString()
				} else {
					bundle1 = nil
				}
				query1 := new(string)
				if !skipIfItem.Query.IsUnknown() && !skipIfItem.Query.IsNull() {
					*query1 = skipIfItem.Query.ValueString()
				} else {
					query1 = nil
				}
				skipIf = append(skipIf, shared.Policy{
					Bundle: bundle1,
					Query:  query1,
				})
			}
			steps = append(steps, shared.Step{
				Reviewers: reviewers,
				SkipIf:    skipIf,
			})
		}
		workflow = &shared.GrantWorkflow{
			Steps: steps,
		}
	}
	out := shared.GrantKitUpdateParams{
		Description: description,
		Name:        name,
		Output:      output,
		Policies:    policies,
		Workflow:    workflow,
	}
	return &out
}

func (r *GrantKitResourceModel) ToDeleteSDKType() *shared.GrantKitCreateParams {
	out := r.ToCreateSDKType()
	return out
}

func (r *GrantKitResourceModel) RefreshFromGetResponse(resp *shared.GrantKit) {
	r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	r.CurrentVersionID = types.StringValue(resp.CurrentVersionID)
	r.Description = types.StringValue(resp.Description)
	r.ID = types.StringValue(resp.ID)
	r.Name = types.StringValue(resp.Name)
	if resp.Output.Append != nil {
		r.Output.Append = types.StringValue(*resp.Output.Append)
	} else {
		r.Output.Append = types.StringNull()
	}
	r.Output.Location = types.StringValue(resp.Output.Location)
	if resp.Output.Overwrite != nil {
		r.Output.Overwrite = types.StringValue(*resp.Output.Overwrite)
	} else {
		r.Output.Overwrite = types.StringNull()
	}
	r.Policies = nil
	for _, policiesItem := range resp.Policies {
		var policies1 Policy
		if policiesItem.Bundle != nil {
			policies1.Bundle = types.StringValue(*policiesItem.Bundle)
		} else {
			policies1.Bundle = types.StringNull()
		}
		if policiesItem.Query != nil {
			policies1.Query = types.StringValue(*policiesItem.Query)
		} else {
			policies1.Query = types.StringNull()
		}
		r.Policies = append(r.Policies, policies1)
	}
	r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	if r.Workflow == nil {
		r.Workflow = &GrantWorkflow{}
	}
	if resp.Workflow == nil {
		r.Workflow = nil
	} else {
		r.Workflow = &GrantWorkflow{}
		r.Workflow.Steps = nil
		for _, stepsItem := range resp.Workflow.Steps {
			var steps1 Step
			steps1.Reviewers.AllOf = nil
			for _, v := range stepsItem.Reviewers.AllOf {
				steps1.Reviewers.AllOf = append(steps1.Reviewers.AllOf, types.StringValue(v))
			}
			steps1.Reviewers.OneOf = nil
			for _, v := range stepsItem.Reviewers.OneOf {
				steps1.Reviewers.OneOf = append(steps1.Reviewers.OneOf, types.StringValue(v))
			}
			steps1.SkipIf = nil
			for _, skipIfItem := range stepsItem.SkipIf {
				var skipIf1 Policy
				if skipIfItem.Bundle != nil {
					skipIf1.Bundle = types.StringValue(*skipIfItem.Bundle)
				} else {
					skipIf1.Bundle = types.StringNull()
				}
				if skipIfItem.Query != nil {
					skipIf1.Query = types.StringValue(*skipIfItem.Query)
				} else {
					skipIf1.Query = types.StringNull()
				}
				steps1.SkipIf = append(steps1.SkipIf, skipIf1)
			}
			r.Workflow.Steps = append(r.Workflow.Steps, steps1)
		}
	}
}

func (r *GrantKitResourceModel) RefreshFromCreateResponse(resp *shared.GrantKit) {
	r.RefreshFromGetResponse(resp)
}

func (r *GrantKitResourceModel) RefreshFromUpdateResponse(resp *shared.GrantKit) {
	r.RefreshFromGetResponse(resp)
}
